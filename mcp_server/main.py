# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:48:48+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub

from models import BestSellingProductResponse

app = MCPProxy(
    contact={'name': 'eBay Inc,', 'x-twitter': 'ebay'},
    description='The Marketing API retrieves eBay products based on a metric, such as Best Selling, as well as products that were also bought and also viewed.',
    license={
        'name': 'eBay API License Agreement',
        'url': 'https://go.developer.ebay.com/api-license-agreement',
    },
    title='Buy Marketing API',
    version='v1_beta.2.0',
    servers=[{'url': 'https://api.ebay.com/buy/marketing/v1_beta'}],
)


@app.get(
    '/merchandised_product',
    description=""" This method returns an array of products based on the category and metric specified. This includes details of the product, such as the eBay product ID (EPID), title, and user reviews and ratings for the product. You can use the <code>epid</code> returned by this method in the Browse API <b>search</b> method to retrieve items for this product. <h3><b>Restrictions </b></h3> <ul><li>To test <b> getMerchandisedProducts</b> in Sandbox, you must use category ID 9355 and the response will be mock data.  </li>   <li>For a list of supported sites and other restrictions, see <a href="/api-docs/buy/marketing/overview.html#API">API Restrictions</a>.</li>  </ul> """,
    tags=['product_inventory_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_merchandised_products(
    aspect_filter: Optional[str] = None,
    category_id: str = ...,
    limit: Optional[str] = None,
    metric_name: str = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
