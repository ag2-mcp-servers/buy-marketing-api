# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:48:48+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class Amount(BaseModel):
    currency: Optional[str] = Field(
        None,
        description='The three-letter <a href="https://www.iso.org/iso-4217-currency-codes.html" target="_blank">ISO 4217</a> code representing the currency of the amount in the <b> value</b> field. For implementation help, refer to <a href=\'https://developer.ebay.com/api-docs/buy/marketing/types/bas:CurrencyCodeEnum\'>eBay API documentation</a>',
    )
    value: Optional[str] = Field(
        None,
        description='The monetary amount, in the currency specified by the <b> currency</b> field. ',
    )


class ErrorParameter(BaseModel):
    name: Optional[str] = Field(
        None,
        description='This is the name of input field that caused an issue with the call request.',
    )
    value: Optional[str] = Field(
        None,
        description='This is the actual value that was passed in for the element specified in the <b> name</b>  field.',
    )


class Image(BaseModel):
    height: Optional[int] = Field(
        None, description='<b> Reserved for future use. </b> '
    )
    imageUrl: Optional[str] = Field(None, description='The URL of the image.')
    width: Optional[int] = Field(None, description='<b> Reserved for future use. </b> ')


class MarketPriceDetail(BaseModel):
    conditionGroup: Optional[str] = Field(
        None, description='The name for the condition of the product. For example: NEW'
    )
    conditionIds: Optional[List[str]] = Field(
        None, description='An array of condition identifiers for the product.'
    )
    estimatedStartPrice: Optional[Amount] = None


class RatingAspectDistribution(BaseModel):
    count: Optional[int] = Field(
        None,
        description='The number of eBay users that choose this rating aspect value.',
    )
    percentage: Optional[str] = Field(
        None,
        description='The percentage of the aspect rating value. <br /><br /> <b> ratingAspectDistributions.percentage</b> =  <b> ratingAspectDistributions.count</b> /  <b>ratingAspects.count</b>',
    )
    value: Optional[str] = Field(
        None, description='The rating aspect. For example: TRUE or FALSE'
    )


class Error(BaseModel):
    category: Optional[str] = Field(
        None,
        description='This string value indicates the error category. There are three categories of errors: request errors, application errors, and system errors. ',
    )
    domain: Optional[str] = Field(
        None,
        description='The name of the primary system where the error occurred. This is relevant for application errors.',
    )
    errorId: Optional[int] = Field(
        None,
        description='A unique code that identifies the particular error or warning that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.',
    )
    inputRefIds: Optional[List[str]] = Field(
        None,
        description='An array of reference IDs that identify the specific request elements most closely associated to the error or warning, if any.',
    )
    longMessage: Optional[str] = Field(
        None,
        description='A detailed description of the condition that caused the error or warning, and information on what to do to correct the problem.',
    )
    message: Optional[str] = Field(
        None,
        description='A description of the condition that caused the error or warning.',
    )
    outputRefIds: Optional[List[str]] = Field(
        None,
        description='An array of reference IDs that identify the specific response elements most closely associated to the error or warning, if any.',
    )
    parameters: Optional[List[ErrorParameter]] = Field(
        None,
        description='An array of warning and error messages that return one or more variables contextual information about the error or warning. This is often the field or value that triggered the error or warning.',
    )
    subdomain: Optional[str] = Field(
        None,
        description='The name of the subdomain in which the error or warning occurred.',
    )


class RatingAspect(BaseModel):
    count: Optional[int] = Field(
        None,
        description='The number of eBay users that rated the product on this aspect.',
    )
    description: Optional[str] = Field(
        None,
        description='The name of the rating aspect. Camping tent examples: Is it lightweight? or Is it easy to set up?',
    )
    name: Optional[str] = Field(
        None,
        description='The answer or value of the rating aspect. Camping tent examples: Lightweight or Easy to set up',
    )
    ratingAspectDistributions: Optional[List[RatingAspectDistribution]] = Field(
        None,
        description='The container for the details of the aspect rating. The details show the aspect rating value, usually TRUE or FALSE and the user count and percentage.',
    )


class MerchandisedProduct(BaseModel):
    averageRating: Optional[str] = Field(
        None,
        description='The average rating for the product based on eBay user ratings.',
    )
    epid: Optional[str] = Field(
        None,
        description='The eBay product identifier of a product from the eBay product catalog. You can use this value in the Browse API <b>search</b> method to retrieve items for this product.',
    )
    image: Optional[Image] = None
    marketPriceDetails: Optional[List[MarketPriceDetail]] = Field(
        None,
        description='An array of containers for the product market price details, such as condition and market price.',
    )
    ratingAspects: Optional[List[RatingAspect]] = Field(
        None,
        description='An array of containers for ratings of the product aspects, such as "Is it a good value".',
    )
    ratingCount: Optional[int] = Field(
        None, description='The total number of eBay users that rated the product.'
    )
    reviewCount: Optional[int] = Field(
        None,
        description='The total number of eBay users that wrote a review for the product. ',
    )
    title: Optional[str] = Field(None, description='The title of the product.')


class BestSellingProductResponse(BaseModel):
    merchandisedProducts: Optional[List[MerchandisedProduct]] = Field(
        None, description='An array of containers for the products.'
    )
    warnings: Optional[List[Error]] = Field(
        None, description='The container with all the warnings for the input request.'
    )
